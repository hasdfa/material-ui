# AccordionDetails API

The AccordionDetails component API documentation.

## Import

```
import AccordionDetails from '@mui/joy/AccordionDetails';
// or
import { AccordionDetails } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ content?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ content?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `content` | `'div'` | The component that renders the content. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `expanded` | `Mui-expanded` | Class name applied to the root element when expanded. |

***

# AccordionSummary API

The AccordionSummary component API documentation.

## Import

```
import AccordionSummary from '@mui/joy/AccordionSummary';
// or
import { AccordionSummary } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `indicator` | `node` | `` | - |
| `slotProps` | `shape`{ button?: func<br>\| object, indicator?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ button?: elementType, indicator?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `button` | `'button'` | The component that renders the button. |
| `indicator` | `'span'` | The component that renders the indicator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `disabled` | `Mui-disabled` | Class name applied when the accordion is disabled. |
| `expanded` | `Mui-expanded` | Class name applied when the accordion is expanded. |

***

# Accordion API

The Accordion component API documentation.

## Import

```
import Accordion from '@mui/joy/Accordion';
// or
import { Accordion } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `accordionId` | `string` | - | - |
| `children` | `node` | - | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `defaultExpanded` | `bool` | `false` | - |
| `disabled` | `bool` | `false` | - |
| `expanded` | `bool` | - | - |
| `onChange` | `func` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `disabled` | `Mui-disabled` | Class name applied to the root element if \`disabled\` is true. |
| `expanded` | `Mui-expanded` | Class name applied to the root element if \`expanded\` is true. |

***

# AutocompleteListbox API

The AutocompleteListbox component API documentation.

## Import

```
import AutocompleteListbox from '@mui/joy/AutocompleteListbox';
// or
import { AutocompleteListbox } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `size` | `enum`'sm'<br>\| 'md'<br>\| 'lg' | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'contained'<br>\| 'light'<br>\| 'outlined'<br>\| 'text'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLUListElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'ul'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiAutocompleteListbox-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiAutocompleteListbox-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiAutocompleteListbox-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiAutocompleteListbox-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiAutocompleteListbox-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiAutocompleteListbox-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiAutocompleteListbox-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiAutocompleteListbox-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiAutocompleteListbox-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiAutocompleteListbox-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiAutocompleteListbox-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiAutocompleteListbox-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiAutocompleteListbox-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# AutocompleteOption API

The AutocompleteOption component API documentation.

## Import

```
import AutocompleteOption from '@mui/joy/AutocompleteOption';
// or
import { AutocompleteOption } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'contained'<br>\| 'light'<br>\| 'outlined'<br>\| 'text'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLLIElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'li'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiAutocompleteOption-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiAutocompleteOption-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiAutocompleteOption-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiAutocompleteOption-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiAutocompleteOption-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiAutocompleteOption-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `focused` | `Mui-focused` | State class applied to the root element if focused. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the \`component\`'s \`focusVisibleClassName\` prop. |
| `variantOutlined` | `MuiAutocompleteOption-variantOutlined` | State class applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiAutocompleteOption-variantPlain` | State class applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiAutocompleteOption-variantSoft` | State class applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiAutocompleteOption-variantSolid` | State class applied to the root element if \`variant="solid"\`. |

***

# AspectRatio API

The AspectRatio component API documentation.

## Import

```
import AspectRatio from '@mui/joy/AspectRatio';
// or
import { AspectRatio } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `flex` | `bool` | `false` | - |
| `maxHeight` | `union` number<br>\| string | - | - |
| `minHeight` | `union` number<br>\| string | - | - |
| `objectFit` | `enum`'-moz-initial'<br>\| 'contain'<br>\| 'cover'<br>\| 'fill'<br>\| 'inherit'<br>\| 'initial'<br>\| 'none'<br>\| 'revert-layer'<br>\| 'revert'<br>\| 'scale-down'<br>\| 'unset' | `'cover'` | - |
| `ratio` | `union` number<br>\| string | `'16 / 9'` | - |
| `slotProps` | `shape`{ content?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ content?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `content` | `'div'` | The component that renders the content. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiAspectRatio-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiAspectRatio-colorDanger` | Class name applied to the content element if \`color="danger"\`. |
| `colorNeutral` | `MuiAspectRatio-colorNeutral` | Class name applied to the content element if \`color="neutral"\`. |
| `colorPrimary` | `MuiAspectRatio-colorPrimary` | Class name applied to the content element if \`color="primary"\`. |
| `colorSuccess` | `MuiAspectRatio-colorSuccess` | Class name applied to the content element if \`color="success"\`. |
| `colorWarning` | `MuiAspectRatio-colorWarning` | Class name applied to the content element if \`color="warning"\`. |
| `variantOutlined` | `MuiAspectRatio-variantOutlined` | Class name applied to the content element if \`variant="outlined"\`. |
| `variantPlain` | `MuiAspectRatio-variantPlain` | Class name applied to the content element if \`variant="plain"\`. |
| `variantSoft` | `MuiAspectRatio-variantSoft` | Class name applied to the content element if \`variant="soft"\`. |
| `variantSolid` | `MuiAspectRatio-variantSolid` | Class name applied to the content element if \`variant="solid"\`. |

***

# Alert API

The Alert component API documentation.

## Import

```
import Alert from '@mui/joy/Alert';
// or
import { Alert } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `endDecorator` | `node` | - | - |
| `invertedColors` | `bool` | `false` | - |
| `role` | `string` | `'alert'` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ endDecorator?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ endDecorator?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiAlert-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiAlert-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiAlert-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiAlert-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiAlert-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiAlert-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiAlert-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiAlert-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiAlert-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiAlert-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiAlert-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiAlert-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiAlert-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# AccordionGroup API

The AccordionGroup component API documentation.

## Import

```
import AccordionGroup from '@mui/joy/AccordionGroup';
// or
import { AccordionGroup } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disableDivider` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `transition` | `union`{ expanded: string, initial: string }<br>\| string | `'0.2s ease'` | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiAccordionGroup-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiAccordionGroup-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiAccordionGroup-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiAccordionGroup-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiAccordionGroup-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiAccordionGroup-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiAccordionGroup-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiAccordionGroup-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiAccordionGroup-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiAccordionGroup-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiAccordionGroup-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiAccordionGroup-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiAccordionGroup-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Autocomplete API

The Autocomplete component API documentation.

## Import

```
import Autocomplete from '@mui/joy/Autocomplete';
// or
import { Autocomplete } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `options` | `array` | - | - |
| `aria-describedby` | `string` | - | - |
| `aria-label` | `string` | - | - |
| `aria-labelledby` | `string` | - | - |
| `autoComplete` | `bool` | `false` | - |
| `autoFocus` | `bool` | - | - |
| `autoHighlight` | `bool` | `false` | - |
| `autoSelect` | `bool` | `false` | - |
| `blurOnSelect` | `union`'mouse'<br>\| 'touch'<br>\| bool | `false` | - |
| `clearIcon` | `node` | `` | - |
| `clearOnBlur` | `bool` | `!props.freeSolo` | - |
| `clearOnEscape` | `bool` | `false` | - |
| `clearText` | `string` | `'Clear'` | - |
| `closeText` | `string` | `'Close'` | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `defaultValue` | `custom` any | `props.multiple ? [] : null` | - |
| `disableClearable` | `bool` | `false` | - |
| `disableCloseOnSelect` | `bool` | `false` | - |
| `disabled` | `bool` | `false` | - |
| `disabledItemsFocusable` | `bool` | `false` | - |
| `disableListWrap` | `bool` | `false` | - |
| `endDecorator` | `node` | - | - |
| `error` | `bool` | `false` | - |
| `filterOptions` | `func` | `createFilterOptions()` | - |
| `filterSelectedOptions` | `bool` | `false` | - |
| `forcePopupIcon` | `union`'auto'<br>\| bool | `'auto'` | - |
| `freeSolo` | `bool` | `false` | - |
| `getLimitTagsText` | `func` | ``(more: string | number) => `+${more}` `` | - |
| `getOptionDisabled` | `func` | - | - |
| `getOptionKey` | `func` | - | - |
| `getOptionLabel` | `func` | `(option) => option.label ?? option` | - |
| `groupBy` | `func` | - | - |
| `handleHomeEndKeys` | `bool` | `!props.freeSolo` | - |
| `id` | `string` | - | - |
| `includeInputInList` | `bool` | `false` | - |
| `inputValue` | `string` | - | - |
| `isOptionEqualToValue` | `func` | - | - |
| `limitTags` | `custom` integer | `-1` | - |
| `loading` | `bool` | `false` | - |
| `loadingText` | `node` | `'Loading…'` | - |
| `multiple` | `bool` | `false` | - |
| `name` | `string` | - | - |
| `noOptionsText` | `node` | `'No options'` | - |
| `onChange` | `func` | - | - |
| `onClose` | `func` | - | - |
| `onHighlightChange` | `func` | - | - |
| `onInputChange` | `func` | - | - |
| `onOpen` | `func` | - | - |
| `open` | `bool` | - | - |
| `openOnFocus` | `bool` | `false` | - |
| `openText` | `string` | `'Open'` | - |
| `placeholder` | `string` | - | - |
| `popupIcon` | `node` | `` | - |
| `readOnly` | `bool` | `false` | - |
| `renderGroup` | `func` | - | - |
| `renderOption` | `func` | - | - |
| `renderTags` | `func` | - | - |
| `required` | `bool` | - | - |
| `selectOnFocus` | `bool` | `!props.freeSolo` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ clearIndicator?: func<br>\| object, endDecorator?: func<br>\| object, input?: func<br>\| object, limitTag?: func<br>\| object, listbox?: func<br>\| object, loading?: func<br>\| object, noOptions?: func<br>\| object, option?: func<br>\| object, popupIndicator?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object, wrapper?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ clearIndicator?: elementType, endDecorator?: elementType, input?: elementType, limitTag?: elementType, listbox?: elementType, loading?: elementType, noOptions?: elementType, option?: elementType, popupIndicator?: elementType, root?: elementType, startDecorator?: elementType, wrapper?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `type` | `string` | - | - |
| `value` | `custom` any | - | - |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `wrapper` | `'div'` | The component that renders the wrapper. |
| `input` | `'input'` | The component that renders the input. |
| `startDecorator` | `'div'` | The component that renders the start decorator. |
| `endDecorator` | `'div'` | The component that renders the end decorator. |
| `clearIndicator` | `'button'` | The component that renders the clear indicator. |
| `popupIndicator` | `'button'` | The component that renders the popup indicator. |
| `listbox` | `'ul'` | The component that renders the listbox. |
| `option` | `'li'` | The component that renders the option. |
| `loading` | `'li'` | The component that renders the loading. |
| `noOptions` | `'li'` | The component that renders the no-options. |
| `limitTag` | `'div'` | The component that renders the limit tag. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiAutocomplete-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiAutocomplete-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiAutocomplete-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiAutocomplete-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiAutocomplete-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiAutocomplete-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | Class name applied to the root element if \`disabled={true}\`. |
| `error` | `Mui-error` | State class applied to the root element if \`error={true}\`. |
| `focused` | `Mui-focused` | Class name applied to the root element if the component is focused. |
| `formControl` | `MuiAutocomplete-formControl` | Class name applied to the root element if the component is a descendant of \`FormControl\`. |
| `hasClearIcon` | `MuiAutocomplete-hasClearIcon` | Class name applied when the clear icon is rendered. |
| `hasPopupIcon` | `MuiAutocomplete-hasPopupIcon` | Class name applied when the popup icon is rendered. |
| `multiple` | `MuiAutocomplete-multiple` | Class name applied to the wrapper element if \`multiple={true}\`. |
| `popupIndicatorOpen` | `MuiAutocomplete-popupIndicatorOpen` | Class name applied to the popup indicator if the popup is open. |
| `sizeLg` | `MuiAutocomplete-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiAutocomplete-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiAutocomplete-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiAutocomplete-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiAutocomplete-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiAutocomplete-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiAutocomplete-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Avatar API

The Avatar component API documentation.

## Import

```
import Avatar from '@mui/joy/Avatar';
// or
import { Avatar } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `alt` | `string` | - | - |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `size` | `union`'lg'<br>\| 'md'<br>\| 'sm'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ fallback?: func<br>\| object, img?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ fallback?: elementType, img?: elementType, root?: elementType } | `{}` | - |
| `src` | `string` | - | - |
| `srcSet` | `string` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `img` | `'img'` | The component that renders the img. |
| `fallback` | `'svg'` | The component that renders the fallback. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiAvatar-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiAvatar-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiAvatar-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiAvatar-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiAvatar-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiAvatar-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiAvatar-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiAvatar-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiAvatar-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiAvatar-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantSoft` | `MuiAvatar-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiAvatar-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Badge API

The Badge component API documentation.

## Import

```
import Badge from '@mui/joy/Badge';
// or
import { Badge } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `anchorOrigin` | `shape`{ horizontal: 'left'<br>\| 'right', vertical: 'bottom'<br>\| 'top' } | `{<br>  vertical: 'top',<br>  horizontal: 'right',<br>}` | - |
| `badgeContent` | `node` | `''` | - |
| `badgeInset` | `union` number<br>\| string | `0` | - |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'primary'` | - |
| `component` | `elementType` | - | - |
| `invisible` | `bool` | `false` | - |
| `max` | `number` | `99` | - |
| `showZero` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ badge?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ badge?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'solid'` | - |

:::info
The `ref` is forwarded to the HTMLSpanElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'span'` | The component that renders the root. |
| `badge` | `'span'` | The component that renders the badge. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `anchorOriginBottomLeft` | `MuiBadge-anchorOriginBottomLeft` | Class name applied to the badge \`span\` element if \`anchorOrigin={{ 'bottom', 'left' }}\`. |
| `anchorOriginBottomRight` | `MuiBadge-anchorOriginBottomRight` | Class name applied to the badge \`span\` element if \`anchorOrigin={{ 'bottom', 'right' }}\`. |
| `anchorOriginTopLeft` | `MuiBadge-anchorOriginTopLeft` | Class name applied to the badge \`span\` element if \`anchorOrigin={{ 'top', 'left' }}\`. |
| `anchorOriginTopRight` | `MuiBadge-anchorOriginTopRight` | Class name applied to the badge \`span\` element if \`anchorOrigin={{ 'top', 'right' }}\`. |
| `colorContext` | `MuiBadge-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiBadge-colorDanger` | Class name applied to the badge \`span\` element if \`color="danger"\`. |
| `colorNeutral` | `MuiBadge-colorNeutral` | Class name applied to the badge \`span\` element if \`color="neutral"\`. |
| `colorPrimary` | `MuiBadge-colorPrimary` | Class name applied to the badge \`span\` element if \`color="primary"\`. |
| `colorSuccess` | `MuiBadge-colorSuccess` | Class name applied to the badge \`span\` element if \`color="success"\`. |
| `colorWarning` | `MuiBadge-colorWarning` | Class name applied to the badge \`span\` element if \`color="warning"\`. |
| `invisible` | `MuiBadge-invisible` | State class applied to the badge \`span\` element if \`invisible={true}\`. |
| `locationInside` | `MuiBadge-locationInside` | State class applied to the badge \`span\` element if \`location="inside"\`. |
| `locationOutside` | `MuiBadge-locationOutside` | State class applied to the badge \`span\` element if \`location="outside"\`. |
| `sizeLg` | `MuiBadge-sizeLg` | Class name applied to the badge \`span\` element if \`size="lg"\`. |
| `sizeMd` | `MuiBadge-sizeMd` | Class name applied to the badge \`span\` element if \`size="md"\`. |
| `sizeSm` | `MuiBadge-sizeSm` | Class name applied to the badge \`span\` element if \`size="sm"\`. |
| `variantOutlined` | `MuiBadge-variantOutlined` | Class name applied to the badge \`span\` element if \`variant="outlined"\`. |
| `variantPlain` | `MuiBadge-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiBadge-variantSoft` | Class name applied to the badge \`span\` element if \`variant="soft"\`. |
| `variantSolid` | `MuiBadge-variantSolid` | Class name applied to the badge \`span\` element if \`variant="solid"\`. |

***

# Breadcrumbs API

The Breadcrumbs component API documentation.

## Import

```
import Breadcrumbs from '@mui/joy/Breadcrumbs';
// or
import { Breadcrumbs } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `separator` | `node` | `'/'` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ li?: func<br>\| object, ol?: func<br>\| object, root?: func<br>\| object, separator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ li?: elementType, ol?: elementType, root?: elementType, separator?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'nav'` | The component that renders the root. |
| `ol` | `'ol'` | The component that renders the ol. |
| `li` | `'li'` | The component that renders the li. |
| `separator` | `'li'` | The component that renders the separator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `sizeLg` | `MuiBreadcrumbs-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiBreadcrumbs-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiBreadcrumbs-sizeSm` | Class name applied to the root element if \`size="sm"\`. |

***

# Box API

The Box component API documentation.

## Import

```
import Box from '@mui/joy/Box';
// or
import { Box } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `component` | `elementType` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

The component is styled using the `Box` CSS class.

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `root` | `MuiBox-root` | Class name applied to the root element. |

***

# CardActions API

The CardActions component API documentation.

## Import

```
import CardActions from '@mui/joy/CardActions';
// or
import { CardActions } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `buttonFlex` | `union` number<br>\| string | - | - |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `orientation` | `enum`'horizontal-reverse'<br>\| 'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# CardCover API

The CardCover component API documentation.

## Import

```
import CardCover from '@mui/joy/CardCover';
// or
import { CardCover } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# Button API

The Button component API documentation.

## Import

```
import Button from '@mui/joy/Button';
// or
import { Button } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `action` | `union` func<br>\| { current?: { focusVisible: func } } | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'primary'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `endDecorator` | `node` | - | - |
| `fullWidth` | `bool` | `false` | - |
| `loading` | `bool` | `false` | - |
| `loadingIndicator` | `node` | `` | - |
| `loadingPosition` | `enum`'center'<br>\| 'end'<br>\| 'start' | `'center'` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ endDecorator?: func<br>\| object, loadingIndicatorCenter?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ endDecorator?: elementType, loadingIndicatorCenter?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'solid'` | - |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'button'` | The component that renders the root. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |
| `loadingIndicatorCenter` | `'span'` | The component that renders the loading indicator center. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiButton-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiButton-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiButton-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiButton-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiButton-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiButton-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the ButtonBase root element if the button is keyboard focused. |
| `fullWidth` | `MuiButton-fullWidth` | Class name applied to the root element if \`fullWidth={true}\`. |
| `loading` | `MuiButton-loading` | Class name applied to the root element if \`loading={true}\`. |
| `sizeLg` | `MuiButton-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiButton-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiButton-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiButton-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiButton-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiButton-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiButton-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# AvatarGroup API

The AvatarGroup component API documentation.

## Import

```
import AvatarGroup from '@mui/joy/AvatarGroup';
// or
import { AvatarGroup } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `size` | `union`'lg'<br>\| 'md'<br>\| 'sm'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# ButtonGroup API

The ButtonGroup component API documentation.

## Import

```
import ButtonGroup from '@mui/joy/ButtonGroup';
// or
import { ButtonGroup } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `buttonFlex` | `union` number<br>\| string | - | - |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `size` | `union`'lg'<br>\| 'md'<br>\| 'sm'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `spacing` | `union` Array\| string><br>\| number<br>\| { lg?: number<br>\| string, md?: number<br>\| string, sm?: number<br>\| string, xl?: number<br>\| string, xs?: number<br>\| string }<br>\| string | `0` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiButtonGroup-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiButtonGroup-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiButtonGroup-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiButtonGroup-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiButtonGroup-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiButtonGroup-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `horizontal` | `MuiButtonGroup-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiButtonGroup-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiButtonGroup-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiButtonGroup-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiButtonGroup-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiButtonGroup-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiButtonGroup-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiButtonGroup-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiButtonGroup-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# CardOverflow API

The CardOverflow component API documentation.

## Import

```
import CardOverflow from '@mui/joy/CardOverflow';
// or
import { CardOverflow } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiCardOverflow-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiCardOverflow-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiCardOverflow-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiCardOverflow-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiCardOverflow-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiCardOverflow-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `variantOutlined` | `MuiCardOverflow-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiCardOverflow-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiCardOverflow-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiCardOverflow-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# CardContent API

The CardContent component API documentation.

## Import

```
import CardContent from '@mui/joy/CardContent';
// or
import { CardContent } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'vertical'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# Card API

The Card component API documentation.

## Import

```
import Card from '@mui/joy/Card';
// or
import { Card } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `invertedColors` | `bool` | `false` | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'vertical'` | - |
| `size` | `union`'lg'<br>\| 'md'<br>\| 'sm'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiCard-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiCard-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiCard-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiCard-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiCard-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiCard-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `horizontal` | `MuiCard-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiCard-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiCard-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiCard-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiCard-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiCard-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiCard-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiCard-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiCard-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Checkbox API

The Checkbox component API documentation.

## Import

```
import Checkbox from '@mui/joy/Checkbox';
// or
import { Checkbox } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `checked` | `bool` | - | - |
| `checkedIcon` | `node` | `` | - |
| `className` | `string` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `defaultChecked` | `bool` | - | - |
| `disabled` | `bool` | - | - |
| `disableIcon` | `bool` | `false` | - |
| `indeterminate` | `bool` | `false` | - |
| `indeterminateIcon` | `node` | `` | - |
| `label` | `node` | - | - |
| `name` | `string` | - | - |
| `onChange` | `func` | - | - |
| `overlay` | `bool` | `false` | - |
| `readOnly` | `bool` | - | - |
| `required` | `bool` | - | - |
| `size` | `enum`'sm'<br>\| 'md'<br>\| 'lg' | `'md'` | - |
| `slotProps` | `shape`{ action?: func<br>\| object, checkbox?: func<br>\| object, input?: func<br>\| object, label?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ action?: elementType, checkbox?: elementType, input?: elementType, label?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `uncheckedIcon` | `node` | - | - |
| `value` | `union` Array<br>\| number<br>\| string | - | - |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'solid'` | - |

:::info
The `ref` is forwarded to the HTMLSpanElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'span'` | The component that renders the root. |
| `checkbox` | `'span'` | The component that renders the checkbox. |
| `action` | `'span'` | The component that renders the action. |
| `input` | `'input'` | The component that renders the input. |
| `label` | `'label'` | The component that renders the label. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `checked` | `Mui-checked` | State class applied to the input component's \`checked\` class. |
| `colorContext` | `MuiCheckbox-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiCheckbox-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiCheckbox-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiCheckbox-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiCheckbox-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiCheckbox-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the input component's disabled class. |
| `focusVisible` | `Mui-focusVisible` | Class name applied to the root element if the switch has visible focus |
| `indeterminate` | `MuiCheckbox-indeterminate` | State class applied to the root element if \`indeterminate={true}\`. |
| `sizeLg` | `MuiCheckbox-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiCheckbox-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiCheckbox-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiCheckbox-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantSoft` | `MuiCheckbox-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiCheckbox-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# CircularProgress API

The CircularProgress component API documentation.

## Import

```
import CircularProgress from '@mui/joy/CircularProgress';
// or
import { CircularProgress } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'primary'` | - |
| `component` | `elementType` | - | - |
| `determinate` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ progress?: func<br>\| object, root?: func<br>\| object, svg?: func<br>\| object, track?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ progress?: elementType, root?: elementType, svg?: elementType, track?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `thickness` | `number` | - | - |
| `value` | `number` | `determinate ? 0 : 25` | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLSpanElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'span'` | The component that renders the root. |
| `svg` | `'svg'` | The component that renders the svg. |
| `track` | `'circle'` | The component that renders the track. |
| `progress` | `'circle'` | The component that renders the progress. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiCircularProgress-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiCircularProgress-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiCircularProgress-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiCircularProgress-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiCircularProgress-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiCircularProgress-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `determinate` | `MuiCircularProgress-determinate` | Class name applied to the root element if \`determinate\` is true. |
| `sizeLg` | `MuiCircularProgress-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiCircularProgress-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiCircularProgress-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiCircularProgress-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiCircularProgress-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiCircularProgress-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiCircularProgress-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Chip API

The Chip component API documentation.

## Import

```
import Chip from '@mui/joy/Chip';
// or
import { Chip } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `endDecorator` | `node` | - | - |
| `onClick` | `func` | - | - |
| `size` | `union`'lg'<br>\| 'md'<br>\| 'sm'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ action?: func<br>\| object, endDecorator?: func<br>\| object, label?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ action?: elementType, endDecorator?: elementType, label?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `label` | `'span'` | The component that renders the label. |
| `action` | `'button'` | The component that renders the action. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiChip-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiChip-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiChip-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiChip-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiChip-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiChip-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the root element if keyboard focused. |
| `labelLg` | `MuiChip-labelLg` | Class name applied to the label \`span\` element if \`size="lg"\`. |
| `labelMd` | `MuiChip-labelMd` | Class name applied to the label \`span\` element if \`size="md"\`. |
| `labelSm` | `MuiChip-labelSm` | Class name applied to the label \`span\` element if \`size="sm"\`. |
| `sizeLg` | `MuiChip-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiChip-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiChip-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiChip-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiChip-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiChip-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiChip-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# DialogContent API

The DialogContent component API documentation.

## Import

```
import DialogContent from '@mui/joy/DialogContent';
// or
import { DialogContent } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'vertical'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# CssBaseline API

The CssBaseline component API documentation.

## Import

```
import CssBaseline from '@mui/joy/CssBaseline';
// or
import { CssBaseline } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `disableColorScheme` | `bool` | `false` | - |

:::info
The `ref` is forwarded to the root element.
:::

***

# DialogActions API

The DialogActions component API documentation.

## Import

```
import DialogActions from '@mui/joy/DialogActions';
// or
import { DialogActions } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `buttonFlex` | `union` number<br>\| string | - | - |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `orientation` | `enum`'horizontal-reverse'<br>\| 'horizontal'<br>\| 'vertical' | `'horizontal-reverse'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# Divider API

The Divider component API documentation.

## Import

```
import Divider from '@mui/joy/Divider';
// or
import { Divider } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `inset` | `union`'none'<br>\| 'context'<br>\| string | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLHRElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'hr'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `horizontal` | `MuiDivider-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `insetContext` | `MuiDivider-insetContext` | Class name applied to the root element if \`inset="context"\`. |
| `insetNone` | `MuiDivider-insetNone` | Class name applied to the root element if \`inset="none"\`. |
| `vertical` | `MuiDivider-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# IconButton API

The IconButton component API documentation.

## Import

```
import IconButton from '@mui/joy/IconButton';
// or
import { IconButton } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `action` | `union` func<br>\| { current?: { focusVisible: func } } | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `focusVisibleClassName` | `string` | - | - |
| `loading` | `bool` | `false` | - |
| `loadingIndicator` | `node` | `` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ loadingIndicator?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ loadingIndicator?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'button'` | The component that renders the root. |
| `loadingIndicator` | `'span'` | The component that renders the loading indicator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiIconButton-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiIconButton-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiIconButton-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiIconButton-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiIconButton-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiIconButton-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the root element if the button is keyboard focused. |
| `loading` | `MuiIconButton-loading` | Class name applied to the root element if \`loading={true}\`. |
| `sizeLg` | `MuiIconButton-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiIconButton-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiIconButton-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiIconButton-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiIconButton-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiIconButton-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiIconButton-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# DialogTitle API

The DialogTitle component API documentation.

## Import

```
import DialogTitle from '@mui/joy/DialogTitle';
// or
import { DialogTitle } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | - | - |
| `component` | `elementType` | - | - |
| `level` | `enum`'body-lg'<br>\| 'body-md'<br>\| 'body-sm'<br>\| 'body-xs'<br>\| 'h1'<br>\| 'h2'<br>\| 'h3'<br>\| 'h4'<br>\| 'inherit'<br>\| 'title-lg'<br>\| 'title-md'<br>\| 'title-sm' | `{ sm: 'title-md', md: 'title-lg', lg: 'h4' }` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | - | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `body-lg` | `MuiDialogTitle-body-lg` | Class name applied to the root element if \`level="body-lg"\`. |
| `body-md` | `MuiDialogTitle-body-md` | Class name applied to the root element if \`level="body-md"\`. |
| `body-sm` | `MuiDialogTitle-body-sm` | Class name applied to the root element if \`level="body-sm"\`. |
| `body-xs` | `MuiDialogTitle-body-xs` | Class name applied to the root element if \`level="body-xs"\`. |
| `colorContext` | `MuiDialogTitle-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiDialogTitle-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiDialogTitle-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiDialogTitle-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiDialogTitle-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiDialogTitle-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `h1` | `MuiDialogTitle-h1` | Class name applied to the root element if \`level="h1"\`. |
| `h2` | `MuiDialogTitle-h2` | Class name applied to the root element if \`level="h2"\`. |
| `h3` | `MuiDialogTitle-h3` | Class name applied to the root element if \`level="h3"\`. |
| `h4` | `MuiDialogTitle-h4` | Class name applied to the root element if \`level="h4"\`. |
| `title-lg` | `MuiDialogTitle-title-lg` | Class name applied to the root element if \`level="title-lg"\`. |
| `title-md` | `MuiDialogTitle-title-md` | Class name applied to the root element if \`level="title-md"\`. |
| `title-sm` | `MuiDialogTitle-title-sm` | Class name applied to the root element if \`level="title-sm"\`. |
| `variantOutlined` | `MuiDialogTitle-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiDialogTitle-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiDialogTitle-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiDialogTitle-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Input API

The Input component API documentation.

## Import

```
import Input from '@mui/joy/Input';
// or
import { Input } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `className` | `string` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `endDecorator` | `node` | - | - |
| `error` | `bool` | `false` | - |
| `fullWidth` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `input` | `'input'` | The component that renders the input. |
| `startDecorator` | `'div'` | The component that renders the start decorator. |
| `endDecorator` | `'div'` | The component that renders the end decorator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiInput-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiInput-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiInput-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiInput-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiInput-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiInput-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | Class name applied to the root element if \`disabled={true}\`. |
| `error` | `Mui-error` | State class applied to the root element if \`error={true}\`. |
| `focused` | `Mui-focused` | Class name applied to the root element if the component is focused. |
| `formControl` | `MuiInput-formControl` | Class name applied to the root element if the component is a descendant of \`FormControl\`. |
| `fullWidth` | `MuiInput-fullWidth` | Class name applied to the root element if \`fullWidth={true}\`. |
| `sizeLg` | `MuiInput-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiInput-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiInput-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiInput-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiInput-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiInput-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiInput-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# FormHelperText API

The FormHelperText component API documentation.

## Import

```
import FormHelperText from '@mui/joy/FormHelperText';
// or
import { FormHelperText } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'p'` | The component that renders the root. |

***

# Grid API

The Grid component API documentation.

## Import

```
import Grid from '@mui/joy/Grid';
// or
import { Grid } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |

The component is styled using the `Grid` CSS class.

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# ListDivider API

The ListDivider component API documentation.

## Import

```
import ListDivider from '@mui/joy/ListDivider';
// or
import { ListDivider } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `inset` | `union`'context'<br>\| 'gutter'<br>\| 'startDecorator'<br>\| 'startContent'<br>\| string | `'context'` | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLLIElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'li'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `horizontal` | `MuiListDivider-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `insetGutter` | `MuiListDivider-insetGutter` | Class name applied to the root element if \`inset="gutter"\`. |
| `insetStartContent` | `MuiListDivider-insetStartContent` | Class name applied to the root element if \`inset="startContent"\`. |
| `insetStartDecorator` | `MuiListDivider-insetStartDecorator` | Class name applied to the root element if \`inset="startDecorator"\`. |
| `vertical` | `MuiListDivider-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# FormControl API

The FormControl component API documentation.

## Import

```
import FormControl from '@mui/joy/FormControl';
// or
import { FormControl } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | - | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `error` | `bool` | `false` | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'vertical'` | - |
| `required` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorDanger` | `MuiFormControl-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiFormControl-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiFormControl-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiFormControl-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiFormControl-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | Class name applied to the root element if \`disabled={true}\`. |
| `error` | `Mui-error` | State class applied to the root element if \`error={true}\`. |
| `horizontal` | `MuiFormControl-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiFormControl-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiFormControl-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiFormControl-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `vertical` | `MuiFormControl-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# LinearProgress API

The LinearProgress component API documentation.

## Import

```
import LinearProgress from '@mui/joy/LinearProgress';
// or
import { LinearProgress } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'primary'` | - |
| `component` | `elementType` | - | - |
| `determinate` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `thickness` | `number` | - | - |
| `value` | `number` | `determinate ? 0 : 25` | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiLinearProgress-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiLinearProgress-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiLinearProgress-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiLinearProgress-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiLinearProgress-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiLinearProgress-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `determinate` | `MuiLinearProgress-determinate` | Class name applied to the root element if \`determinate\` is true. |
| `sizeLg` | `MuiLinearProgress-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiLinearProgress-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiLinearProgress-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiLinearProgress-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiLinearProgress-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiLinearProgress-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiLinearProgress-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# ListItemDecorator API

The ListItemDecorator component API documentation.

## Import

```
import ListItemDecorator from '@mui/joy/ListItemDecorator';
// or
import { ListItemDecorator } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLSpanElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'span'` | The component that renders the root. |

***

# ListItemContent API

The ListItemContent component API documentation.

## Import

```
import ListItemContent from '@mui/joy/ListItemContent';
// or
import { ListItemContent } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# ListItem API

The ListItem component API documentation.

## Import

```
import ListItem from '@mui/joy/ListItem';
// or
import { ListItem } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `endAction` | `node` | - | - |
| `nested` | `bool` | `false` | - |
| `slotProps` | `shape`{ endAction?: func<br>\| object, root?: func<br>\| object, startAction?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ endAction?: elementType, root?: elementType, startAction?: elementType } | `{}` | - |
| `startAction` | `node` | - | - |
| `sticky` | `bool` | `false` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLLIElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'li'` | The component that renders the root. |
| `startAction` | `'div'` | The component that renders the start action. |
| `endAction` | `'div'` | The component that renders the end action. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiListItem-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiListItem-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiListItem-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiListItem-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiListItem-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiListItem-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `nested` | `MuiListItem-nested` | Class name applied to the root element, if nested={true}. |
| `nesting` | `MuiListItem-nesting` | Class name applied to the root element, if it is under a nested list item. |
| `sticky` | `MuiListItem-sticky` | Class name applied to the root element, if sticky={true}. |
| `variantOutlined` | `MuiListItem-variantOutlined` | State class applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiListItem-variantPlain` | State class applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiListItem-variantSoft` | State class applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiListItem-variantSolid` | State class applied to the root element if \`variant="solid"\`. |

***

# MenuItem API

The MenuItem component API documentation.

## Import

```
import MenuItem from '@mui/joy/MenuItem';
// or
import { MenuItem } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |

:::info
The `ref` is forwarded to the HTMLLIElement element.
:::

### Inheritance

The props of the [ListItemButton](/joy-ui/api/list-item-button/) component are also available.

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiMenuItem-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiMenuItem-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiMenuItem-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiMenuItem-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiMenuItem-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiMenuItem-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the inner \`component\` element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the \`component\`'s \`focusVisibleClassName\` prop. |
| `selected` | `Mui-selected` | State class applied to the root element if \`selected={true}\`. |
| `variantOutlined` | `MuiMenuItem-variantOutlined` | State class applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiMenuItem-variantPlain` | State class applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiMenuItem-variantSoft` | State class applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiMenuItem-variantSolid` | State class applied to the root element if \`variant="solid"\`. |

***

# Link API

The Link component API documentation.

## Import

```
import Link from '@mui/joy/Link';
// or
import { Link } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'primary'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `endDecorator` | `node` | - | - |
| `level` | `union`'body1'<br>\| 'body2'<br>\| 'body3'<br>\| 'h1'<br>\| 'h2'<br>\| 'h3'<br>\| 'h4'<br>\| 'h5'<br>\| 'h6'<br>\| 'inherit'<br>\| string | `'body-md'` | - |
| `overlay` | `bool` | `false` | - |
| `slotProps` | `shape`{ endDecorator?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ endDecorator?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `textColor` | `any` | - | - |
| `underline` | `enum`'always'<br>\| 'hover'<br>\| 'none' | `'hover'` | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLAnchorElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'a'` | The component that renders the root. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `body-lg` | `MuiLink-body-lg` | Class name applied to the root element if \`level="body-lg"\`. |
| `body-md` | `MuiLink-body-md` | Class name applied to the root element if \`level="body-md"\`. |
| `body-sm` | `MuiLink-body-sm` | Class name applied to the root element if \`level="body-sm"\`. |
| `body-xs` | `MuiLink-body-xs` | Class name applied to the root element if \`level="body-xs"\`. |
| `colorContext` | `MuiLink-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiLink-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiLink-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiLink-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiLink-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiLink-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the root element if the link is keyboard focused. |
| `h1` | `MuiLink-h1` | Class name applied to the root element if \`level="h1"\`. |
| `h2` | `MuiLink-h2` | Class name applied to the root element if \`level="h2"\`. |
| `h3` | `MuiLink-h3` | Class name applied to the root element if \`level="h3"\`. |
| `h4` | `MuiLink-h4` | Class name applied to the root element if \`level="h4"\`. |
| `title-lg` | `MuiLink-title-lg` | Class name applied to the root element if \`level="title-lg"\`. |
| `title-md` | `MuiLink-title-md` | Class name applied to the root element if \`level="title-md"\`. |
| `title-sm` | `MuiLink-title-sm` | Class name applied to the root element if \`level="title-sm"\`. |
| `underlineAlways` | `MuiLink-underlineAlways` | Class name applied to the root element if \`underline="always"\`. |
| `underlineHover` | `MuiLink-underlineHover` | Class name applied to the root element if \`underline="hover"\`. |
| `underlineNone` | `MuiLink-underlineNone` | Class name applied to the root element if \`underline="none"\`. |
| `variantOutlined` | `MuiLink-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiLink-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiLink-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiLink-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# MenuButton API

The MenuButton component API documentation.

## Import

```
import MenuButton from '@mui/joy/MenuButton';
// or
import { MenuButton } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'info'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `endDecorator` | `node` | - | - |
| `fullWidth` | `bool` | `false` | - |
| `loading` | `bool` | `false` | - |
| `loadingIndicator` | `node` | `` | - |
| `loadingPosition` | `enum`'center'<br>\| 'end'<br>\| 'start' | `'center'` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ endDecorator?: func<br>\| object, loadingIndicatorCenter?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ endDecorator?: elementType, loadingIndicatorCenter?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'button'` | The component that renders the root. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |
| `loadingIndicatorCenter` | `'span'` | The component that renders the loading indicator center. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiMenuButton-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiMenuButton-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorInfo` | `MuiMenuButton-colorInfo` | Class name applied to the root element if \`color="info"\`. |
| `colorNeutral` | `MuiMenuButton-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiMenuButton-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiMenuButton-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiMenuButton-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root element if \`disabled={true}\`. |
| `fullWidth` | `MuiMenuButton-fullWidth` | Class name applied to the root element if \`fullWidth={true}\`. |
| `loading` | `MuiMenuButton-loading` | Class name applied to the root element if \`loading={true}\`. |
| `sizeLg` | `MuiMenuButton-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiMenuButton-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiMenuButton-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiMenuButton-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiMenuButton-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiMenuButton-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiMenuButton-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# List API

The List component API documentation.

## Import

```
import List from '@mui/joy/List';
// or
import { List } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `marker` | `string` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'vertical'` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |
| `wrap` | `bool` | `false` | - |

:::info
The `ref` is forwarded to the HTMLUListElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'ul'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiList-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiList-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiList-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiList-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiList-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiList-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `horizontal` | `MuiList-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `nesting` | `MuiList-nesting` | Class name applied to the root element if wrapped with nested context. |
| `scoped` | `MuiList-scoped` | Class name applied to the root element if \`scoped\` is true. |
| `sizeLg` | `MuiList-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiList-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiList-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiList-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiList-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiList-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiList-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiList-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# MenuList API

The MenuList component API documentation.

## Import

```
import MenuList from '@mui/joy/MenuList';
// or
import { MenuList } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `actions` | `custom` ref | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `onItemsChange` | `func` | - | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLUListElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'ul'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiMenuList-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiMenuList-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiMenuList-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiMenuList-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiMenuList-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiMenuList-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiMenuList-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiMenuList-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiMenuList-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiMenuList-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiMenuList-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiMenuList-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiMenuList-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# ModalClose API

The ModalClose component API documentation.

## Import

```
import ModalClose from '@mui/joy/ModalClose';
// or
import { ModalClose } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'button'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiModalClose-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiModalClose-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiModalClose-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiModalClose-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiModalClose-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiModalClose-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiModalClose-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiModalClose-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiModalClose-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiModalClose-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiModalClose-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiModalClose-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiModalClose-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# ModalDialog API

The ModalDialog component API documentation.

## Import

```
import ModalDialog from '@mui/joy/ModalDialog';
// or
import { ModalDialog } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `invertedColors` | `bool` | `false` | - |
| `layout` | `union`'center'<br>\| 'fullscreen'<br>\| string | `'center'` | - |
| `maxWidth` | `union` number<br>\| string | - | - |
| `minWidth` | `union` number<br>\| string | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'vertical'` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiModalDialog-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiModalDialog-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiModalDialog-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiModalDialog-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiModalDialog-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiModalDialog-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `layoutCenter` | `MuiModalDialog-layoutCenter` | Class name applied to the root element if \`layout="center"\`. |
| `layoutFullscreen` | `MuiModalDialog-layoutFullscreen` | Class name applied to the root element if \`layout="fullscreen"\`. |
| `sizeLg` | `MuiModalDialog-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiModalDialog-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiModalDialog-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiModalDialog-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiModalDialog-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiModalDialog-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiModalDialog-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Menu API

The Menu component API documentation.

## Import

```
import Menu from '@mui/joy/Menu';
// or
import { Menu } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element ( [Popper](/base-ui/react-popper/components-api/#popper)).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `actions` | `custom` ref | - | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disablePortal` | `bool` | `false` | - |
| `invertedColors` | `bool` | `false` | - |
| `keepMounted` | `bool` | `false` | - |
| `modifiers` | `arrayOf` Array<{ data?: object, effect?: func, enabled?: bool, fn?: func, name?: any, options?: object, phase?: 'afterMain'<br>\| 'afterRead'<br>\| 'afterWrite'<br>\| 'beforeMain'<br>\| 'beforeRead'<br>\| 'beforeWrite'<br>\| 'main'<br>\| 'read'<br>\| 'write', requires?: Array, requiresIfExists?: Array }> | - | - |
| `onClose` | `func` | - | - |
| `onItemsChange` | `func` | - | - |
| `open` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLUListElement element.
:::

### Inheritance

The props of the [Popper](/base-ui/react-popper/components-api/#popper) component are also available.

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'ul'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiMenu-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiMenu-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiMenu-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiMenu-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiMenu-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiMenu-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `expanded` | `Mui-expanded` | Class name applied to the root element when the menu open. |
| `listbox` | `MuiMenu-listbox` | Class name applied to the listbox element. |
| `sizeLg` | `MuiMenu-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiMenu-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiMenu-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiMenu-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiMenu-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiMenu-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiMenu-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Modal API

The Modal component API documentation.

## Import

```
import Modal from '@mui/joy/Modal';
// or
import { Modal } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `custom` element | - | - |
| `open` | `bool` | - | - |
| `component` | `elementType` | - | - |
| `container` | `union` HTML element<br>\| func | - | - |
| `disableAutoFocus` | `bool` | `false` | - |
| `disableEnforceFocus` | `bool` | `false` | - |
| `disableEscapeKeyDown` | `bool` | `false` | - |
| `disablePortal` | `bool` | `false` | - |
| `disableRestoreFocus` | `bool` | `false` | - |
| `disableScrollLock` | `bool` | `false` | - |
| `hideBackdrop` | `bool` | `false` | - |
| `keepMounted` | `bool` | `false` | - |
| `onClose` | `func` | - | - |
| `slotProps` | `shape`{ backdrop?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ backdrop?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `backdrop` | `'div'` | The component that renders the backdrop. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `hidden` | `MuiModal-hidden` | Class name applied to the root element when open is false. |

***

# Radio API

The Radio component API documentation.

## Import

```
import Radio from '@mui/joy/Radio';
// or
import { Radio } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `checked` | `bool` | - | - |
| `checkedIcon` | `node` | - | - |
| `className` | `string` | - | - |
| `color` | `union`'danger'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `defaultChecked` | `bool` | - | - |
| `disabled` | `bool` | - | - |
| `disableIcon` | `bool` | `false` | - |
| `label` | `node` | - | - |
| `name` | `string` | - | - |
| `onChange` | `func` | - | - |
| `overlay` | `bool` | `false` | - |
| `readOnly` | `bool` | - | - |
| `required` | `bool` | - | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ action?: func<br>\| object, icon?: func<br>\| object, input?: func<br>\| object, label?: func<br>\| object, radio?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ action?: elementType, icon?: elementType, input?: elementType, label?: elementType, radio?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `uncheckedIcon` | `node` | - | - |
| `value` | `any` | - | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLSpanElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'span'` | The component that renders the root. |
| `radio` | `'span'` | The component that renders the radio. |
| `icon` | `'span'` | The component that renders the icon. |
| `action` | `'span'` | The component that renders the action. |
| `input` | `'input'` | The component that renders the input. |
| `label` | `'label'` | The component that renders the label. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `checked` | `Mui-checked` | State class applied to the root, action slots if \`checked\`. |
| `colorContext` | `MuiRadio-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiRadio-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiRadio-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiRadio-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiRadio-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiRadio-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root, action slots if \`disabled\`. |
| `focusVisible` | `Mui-focusVisible` | Class name applied to the root element if the switch has visible focus |
| `sizeLg` | `MuiRadio-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiRadio-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiRadio-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiRadio-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantSoft` | `MuiRadio-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiRadio-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# RadioGroup API

The RadioGroup component API documentation.

## Import

```
import RadioGroup from '@mui/joy/RadioGroup';
// or
import { RadioGroup } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `className` | `string` | - | - |
| `color` | `union`'danger'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `defaultValue` | `any` | - | - |
| `disableIcon` | `bool` | `false` | - |
| `name` | `string` | - | - |
| `onChange` | `func` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'vertical'` | - |
| `overlay` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `value` | `any` | - | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorDanger` | `MuiRadioGroup-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiRadioGroup-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiRadioGroup-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiRadioGroup-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiRadioGroup-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `horizontal` | `MuiRadioGroup-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiRadioGroup-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiRadioGroup-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiRadioGroup-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiRadioGroup-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiRadioGroup-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiRadioGroup-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiRadioGroup-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiRadioGroup-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Option API

The Option component API documentation.

## Import

```
import Option from '@mui/joy/Option';
// or
import { Option } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `value` | `any` | - | - |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `disabled` | `bool` | `false` | - |
| `label` | `union` element<br>\| string | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the root element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'li'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiOption-colorContext` | Class name applied to the root element if \`color="context"\`. |
| `colorDanger` | `MuiOption-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiOption-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiOption-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiOption-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiOption-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root element if \`disabled={true}\`. |
| `highlighted` | `MuiOption-highlighted` | State class applied to the root element if the option is highlighted. |
| `selected` | `Mui-selected` | State class applied to the root element if the option is selected. |
| `variantOutlined` | `MuiOption-variantOutlined` | State class applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiOption-variantPlain` | State class applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiOption-variantSoft` | State class applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiOption-variantSolid` | State class applied to the root element if \`variant="solid"\`. |

***

# ListSubheader API

The ListSubheader component API documentation.

## Import

```
import ListSubheader from '@mui/joy/ListSubheader';
// or
import { ListSubheader } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | - | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sticky` | `bool` | `false` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | - | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiListSubheader-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiListSubheader-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiListSubheader-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiListSubheader-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiListSubheader-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiListSubheader-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sticky` | `MuiListSubheader-sticky` | Class name applied to the root element, if sticky={true}. |
| `variantOutlined` | `MuiListSubheader-variantOutlined` | State class applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiListSubheader-variantPlain` | State class applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiListSubheader-variantSoft` | State class applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiListSubheader-variantSolid` | State class applied to the root element if \`variant="solid"\`. |

***

# ListItemButton API

The ListItemButton component API documentation.

## Import

```
import ListItemButton from '@mui/joy/ListItemButton';
// or
import { ListItemButton } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `action` | `union` func<br>\| { current?: { focusVisible: func } } | - | - |
| `autoFocus` | `bool` | `false` | - |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `focusVisibleClassName` | `string` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `selected` | `bool` | `false` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiListItemButton-colorContext` | Class name applied to the root element if \`color="context"\`. |
| `colorDanger` | `MuiListItemButton-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiListItemButton-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiListItemButton-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiListItemButton-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiListItemButton-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the inner \`component\` element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the \`component\`'s \`focusVisibleClassName\` prop. |
| `horizontal` | `MuiListItemButton-horizontal` | Class name applied to the root element, if \`orientation="horizontal"\`. |
| `selected` | `Mui-selected` | State class applied to the root element if \`selected={true}\`. |
| `variantOutlined` | `MuiListItemButton-variantOutlined` | State class applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiListItemButton-variantPlain` | State class applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiListItemButton-variantSoft` | State class applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiListItemButton-variantSolid` | State class applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiListItemButton-vertical` | Class name applied to the root element, if \`orientation="vertical"\`. |

***

# ScopedCssBaseline API

The ScopedCssBaseline component API documentation.

## Import

```
import ScopedCssBaseline from '@mui/joy/ScopedCssBaseline';
// or
import { ScopedCssBaseline } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `disableColorScheme` | `bool` | `false` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# Sheet API

The Sheet component API documentation.

## Import

```
import Sheet from '@mui/joy/Sheet';
// or
import { Sheet } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `invertedColors` | `bool` | `false` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiSheet-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiSheet-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiSheet-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiSheet-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiSheet-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiSheet-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `variantOutlined` | `MuiSheet-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiSheet-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiSheet-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiSheet-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Snackbar API

The Snackbar component API documentation.

## Import

```
import Snackbar from '@mui/joy/Snackbar';
// or
import { Snackbar } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `open` | `bool` | - | - |
| `anchorOrigin` | `shape`{ horizontal: 'center'<br>\| 'left'<br>\| 'right', vertical: 'bottom'<br>\| 'top' } | `{ vertical: 'bottom', horizontal: 'right' }` | - |
| `animationDuration` | `number` | `300` | - |
| `autoHideDuration` | `number` | `null` | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disableWindowBlurListener` | `bool` | `false` | - |
| `endDecorator` | `node` | - | - |
| `invertedColors` | `bool` | `false` | - |
| `key` | `custom` any | - | - |
| `onClose` | `func` | - | - |
| `onUnmount` | `func` | - | - |
| `resumeHideDuration` | `number` | - | - |
| `size` | `enum`'sm'<br>\| 'md'<br>\| 'lg' | `'md'` | - |
| `slotProps` | `shape`{ clickAway?: func<br>\| { children: element, disableReactTree?: bool, mouseEvent?: 'onClick'<br>\| 'onMouseDown'<br>\| 'onMouseUp'<br>\| 'onPointerDown'<br>\| 'onPointerUp'<br>\| false, onClickAway: func, touchEvent?: 'onTouchEnd'<br>\| 'onTouchStart'<br>\| false }, endDecorator?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ clickAway?: elementType, endDecorator?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |
| `clickAway` | `ClickAwayListener` | The component that renders the click away. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `anchorOriginBottomCenter` | `MuiSnackbar-anchorOriginBottomCenter` | Styles applied to the root element if \`anchorOrigin={{ 'bottom', 'center' }}\`. |
| `anchorOriginBottomLeft` | `MuiSnackbar-anchorOriginBottomLeft` | Styles applied to the root element if \`anchorOrigin={{ 'bottom', 'left' }}\`. |
| `anchorOriginBottomRight` | `MuiSnackbar-anchorOriginBottomRight` | Styles applied to the root element if \`anchorOrigin={{ 'bottom', 'right' }}\`. |
| `anchorOriginTopCenter` | `MuiSnackbar-anchorOriginTopCenter` | Styles applied to the root element if \`anchorOrigin={{ 'top', 'center' }}\`. |
| `anchorOriginTopLeft` | `MuiSnackbar-anchorOriginTopLeft` | Styles applied to the root element if \`anchorOrigin={{ 'top', 'left' }}\`. |
| `anchorOriginTopRight` | `MuiSnackbar-anchorOriginTopRight` | Styles applied to the root element if \`anchorOrigin={{ 'top', 'right' }}\`. |
| `colorDanger` | `MuiSnackbar-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiSnackbar-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiSnackbar-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiSnackbar-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiSnackbar-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiSnackbar-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiSnackbar-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiSnackbar-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiSnackbar-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiSnackbar-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiSnackbar-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiSnackbar-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Stack API

The Stack component API documentation.

## Import

```
import Stack from '@mui/joy/Stack';
// or
import { Stack } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `direction` | `union`'column-reverse'<br>\| 'column'<br>\| 'row-reverse'<br>\| 'row'<br>\| Array<'column-reverse'<br>\| 'column'<br>\| 'row-reverse'<br>\| 'row'><br>\| object | `'column'` | - |
| `divider` | `node` | - | - |
| `spacing` | `union` Array\| string><br>\| number<br>\| object<br>\| string | `0` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `useFlexGap` | `bool` | `false` | - |

The component is styled using the `Stack` CSS class.

:::info
The `ref` is forwarded to the HTMLElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# StepButton API

The StepButton component API documentation.

## Import

```
import StepButton from '@mui/joy/StepButton';
// or
import { StepButton } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'button'` | The component that renders the root. |

***

# Slider API

The Slider component API documentation.

## Import

```
import Slider from '@mui/joy/Slider';
// or
import { Slider } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `aria-label` | `string` | - | - |
| `aria-valuetext` | `string` | - | - |
| `classes` | `object` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'primary'` | - |
| `component` | `elementType` | - | - |
| `defaultValue` | `union` Array<br>\| number | - | - |
| `disabled` | `bool` | `false` | - |
| `disableSwap` | `bool` | `false` | - |
| `getAriaLabel` | `func` | - | - |
| `getAriaValueText` | `func` | - | - |
| `isRtl` | `bool` | `false` | - |
| `marks` | `union` Array<{ label?: node, value: number }><br>\| bool | `false` | - |
| `max` | `number` | `100` | - |
| `min` | `number` | `0` | - |
| `name` | `string` | - | - |
| `onChange` | `func` | - | - |
| `onChangeCommitted` | `func` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `scale` | `func` | `function Identity(x) {<br>  return x;<br>}` | - |
| `shiftStep` | `number` | `10` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ input?: func<br>\| object, mark?: func<br>\| object, markLabel?: func<br>\| object, rail?: func<br>\| object, root?: func<br>\| object, thumb?: func<br>\| object, track?: func<br>\| object, valueLabel?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ input?: elementType, mark?: elementType, markLabel?: elementType, rail?: elementType, root?: elementType, thumb?: elementType, track?: elementType, valueLabel?: elementType } | `{}` | - |
| `step` | `number` | `1` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `tabIndex` | `number` | - | - |
| `track` | `enum`'inverted'<br>\| 'normal'<br>\| false | `'normal'` | - |
| `value` | `union` Array<br>\| number | - | - |
| `valueLabelDisplay` | `enum`'auto'<br>\| 'off'<br>\| 'on' | `'off'` | - |
| `valueLabelFormat` | `union` func<br>\| string | `function Identity(x) {<br>  return x;<br>}` | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'solid'` | - |

:::info
The `ref` is forwarded to the HTMLSpanElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'span'` | The component that renders the root. |
| `track` | `'span'` | The component that renders the track. |
| `rail` | `'span'` | The component that renders the rail. |
| `thumb` | `'span'` | The component that renders the thumb. |
| `mark` | `'span'` | The component that renders the mark. |
| `markLabel` | `'span'` | The component that renders the mark label. |
| `valueLabel` | `'span'` | The component that renders the value label. |
| `input` | `'input'` | The component that renders the input. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `active` | `Mui-active` | State class applied to the thumb element if it's active. |
| `disabled` | `Mui-disabled` | State class applied to the root and thumb element if \`disabled={true}\`. |
| `dragging` | `MuiSlider-dragging` | State class applied to the root if a thumb is being dragged. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the thumb element if keyboard focused. |
| `markActive` | `MuiSlider-markActive` | Class name applied to the mark element if active (depending on the value). |
| `marked` | `MuiSlider-marked` | Class name applied to the root element if \`marks\` is provided with at least one label. |
| `markLabelActive` | `MuiSlider-markLabelActive` | Class name applied to the mark label element if active (depending on the value). |
| `trackFalse` | `MuiSlider-trackFalse` | Class name applied to the root element if \`track={false}\`. |
| `trackInverted` | `MuiSlider-trackInverted` | Class name applied to the root element if \`track="inverted"\`. |
| `vertical` | `MuiSlider-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Drawer API

The Drawer component API documentation.

## Import

```
import Drawer from '@mui/joy/Drawer';
// or
import { Drawer } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `open` | `bool` | - | - |
| `anchor` | `enum`'bottom'<br>\| 'left'<br>\| 'right'<br>\| 'top' | `'left'` | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `container` | `union` HTML element<br>\| func | - | - |
| `disableAutoFocus` | `bool` | `false` | - |
| `disableEnforceFocus` | `bool` | `false` | - |
| `disableEscapeKeyDown` | `bool` | `false` | - |
| `disablePortal` | `bool` | `false` | - |
| `disableRestoreFocus` | `bool` | `false` | - |
| `disableScrollLock` | `bool` | `false` | - |
| `hideBackdrop` | `bool` | `false` | - |
| `invertedColors` | `bool` | `false` | - |
| `onClose` | `func` | - | - |
| `size` | `enum`'sm'<br>\| 'md'<br>\| 'lg' | `'md'` | - |
| `slotProps` | `shape`{ backdrop?: func<br>\| object, content?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ backdrop?: elementType, content?: elementType, root?: elementType } | `{}` | - |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `backdrop` | `'div'` | The component that renders the backdrop. |
| `content` | `'div'` | The component that renders the content of the drawer. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiDrawer-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiDrawer-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiDrawer-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiDrawer-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiDrawer-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiDrawer-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `hidden` | `MuiDrawer-hidden` | Class name applied to the root element when open is false. |
| `sizeLg` | `MuiDrawer-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiDrawer-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiDrawer-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiDrawer-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiDrawer-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiDrawer-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiDrawer-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Skeleton API

The Skeleton component API documentation.

## Import

```
import Skeleton from '@mui/joy/Skeleton';
// or
import { Skeleton } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `animation` | `enum`'pulse'<br>\| 'wave'<br>\| false | `'pulse'` | - |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `height` | `union` Array\| string><br>\| number<br>\| { lg?: number<br>\| string, md?: number<br>\| string, sm?: number<br>\| string, xl?: number<br>\| string, xs?: number<br>\| string }<br>\| string | - | - |
| `level` | `union`'h1'<br>\| 'h2'<br>\| 'h3'<br>\| 'h4'<br>\| 'title-lg'<br>\| 'title-md'<br>\| 'title-sm'<br>\| 'body-lg'<br>\| 'body-md'<br>\| 'body-sm'<br>\| 'body-xs'<br>\| 'inherit'<br>\| string | `variant === 'text' ? 'body-md' : 'inherit'` | - |
| `loading` | `bool` | `true` | - |
| `overlay` | `bool` | `false` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'circular'<br>\| 'inline'<br>\| 'overlay'<br>\| 'rectangular'<br>\| 'text'<br>\| string | `'overlay'` | - |
| `width` | `union` Array\| string><br>\| number<br>\| { lg?: number<br>\| string, md?: number<br>\| string, sm?: number<br>\| string, xl?: number<br>\| string, xs?: number<br>\| string }<br>\| string | - | - |

:::info
The `ref` is forwarded to the HTMLSpanElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'span'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `body-lg` | `MuiSkeleton-body-lg` | Class name applied to the root element if \`level="body-lg"\`. |
| `body-md` | `MuiSkeleton-body-md` | Class name applied to the root element if \`level="body-md"\`. |
| `body-sm` | `MuiSkeleton-body-sm` | Class name applied to the root element if \`level="body-sm"\`. |
| `body-xs` | `MuiSkeleton-body-xs` | Class name applied to the root element if \`level="body-xs"\`. |
| `h1` | `MuiSkeleton-h1` | Class name applied to the root element if \`level="h1"\`. |
| `h2` | `MuiSkeleton-h2` | Class name applied to the root element if \`level="h2"\`. |
| `h3` | `MuiSkeleton-h3` | Class name applied to the root element if \`level="h3"\`. |
| `h4` | `MuiSkeleton-h4` | Class name applied to the root element if \`level="h4"\`. |
| `title-lg` | `MuiSkeleton-title-lg` | Class name applied to the root element if \`level="title-lg"\`. |
| `title-md` | `MuiSkeleton-title-md` | Class name applied to the root element if \`level="title-md"\`. |
| `title-sm` | `MuiSkeleton-title-sm` | Class name applied to the root element if \`level="title-sm"\`. |
| `variantCircular` | `MuiSkeleton-variantCircular` | Class name applied to the root element if \`variant="circular"\`. |
| `variantInline` | `MuiSkeleton-variantInline` | Class name applied to the root element if \`variant="inline"\`. |
| `variantOverlay` | `MuiSkeleton-variantOverlay` | Class name applied to the root element if \`variant="overlay"\`. |
| `variantRectangular` | `MuiSkeleton-variantRectangular` | Class name applied to the root element if \`variant="rectangular"\`. |
| `variantText` | `MuiSkeleton-variantText` | Class name applied to the root element if \`variant="text"\`. |

***

# ChipDelete API

The ChipDelete component API documentation.

## Import

```
import ChipDelete from '@mui/joy/ChipDelete';
// or
import { ChipDelete } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | - | - |
| `onDelete` | `func` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'button'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiChipDelete-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiChipDelete-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiChipDelete-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiChipDelete-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiChipDelete-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiChipDelete-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the root element if keyboard focused. |
| `variantOutlined` | `MuiChipDelete-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiChipDelete-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiChipDelete-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiChipDelete-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# StepIndicator API

The StepIndicator component API documentation.

## Import

```
import StepIndicator from '@mui/joy/StepIndicator';
// or
import { StepIndicator } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'soft'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiStepIndicator-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiStepIndicator-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiStepIndicator-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiStepIndicator-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiStepIndicator-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiStepIndicator-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `horizontal` | `MuiStepIndicator-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `variantOutlined` | `MuiStepIndicator-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiStepIndicator-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiStepIndicator-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiStepIndicator-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiStepIndicator-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Step API

The Step component API documentation.

## Import

```
import Step from '@mui/joy/Step';
// or
import { Step } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `active` | `bool` | `false` | - |
| `children` | `node` | - | - |
| `completed` | `bool` | `false` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `indicator` | `node` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `slotProps` | `shape`{ indicator?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ indicator?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLLIElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'li'` | The component that renders the root. |
| `indicator` | `'div'` | The component that renders the indicator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `active` | `Mui-active` | Class name applied to the root element if \`active\` is true. |
| `completed` | `Mui-completed` | Class name applied to the root element if \`completed\` is true. |
| `disabled` | `Mui-disabled` | Class name applied to the root element if \`disabled\` is true. |
| `horizontal` | `MuiStep-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `vertical` | `MuiStep-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Stepper API

The Stepper component API documentation.

## Import

```
import Stepper from '@mui/joy/Stepper';
// or
import { Stepper } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `size` | `union`'lg'<br>\| 'md'<br>\| 'sm'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLOListElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'ol'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `horizontal` | `MuiStepper-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiStepper-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiStepper-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiStepper-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `vertical` | `MuiStepper-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# ModalOverflow API

The ModalOverflow component API documentation.

## Import

```
import ModalOverflow from '@mui/joy/ModalOverflow';
// or
import { ModalOverflow } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

***

# Switch API

The Switch component API documentation.

## Import

```
import Switch from '@mui/joy/Switch';
// or
import { Switch } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `checked` | `bool` | - | - |
| `color` | `union`'danger'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `defaultChecked` | `bool` | - | - |
| `disabled` | `bool` | - | - |
| `endDecorator` | `union` node<br>\| func | - | - |
| `onChange` | `func` | - | - |
| `readOnly` | `bool` | - | - |
| `required` | `bool` | - | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ action?: func<br>\| object, endDecorator?: func<br>\| object, input?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object, thumb?: func<br>\| object, track?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ action?: elementType, endDecorator?: elementType, input?: elementType, root?: elementType, startDecorator?: elementType, thumb?: elementType, track?: elementType } | `{}` | - |
| `startDecorator` | `union` node<br>\| func | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'solid'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `thumb` | `'span'` | The component that renders the thumb. |
| `action` | `'div'` | The component that renders the action. |
| `input` | `'input'` | The component that renders the input. |
| `track` | `'span'` | The component that renders the track. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `checked` | `Mui-checked` | State class applied to the root \`checked\` class. |
| `colorContext` | `MuiSwitch-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiSwitch-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorPrimary` | `MuiSwitch-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiSwitch-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiSwitch-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root disabled class. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the root element if the switch has visible focus |
| `readOnly` | `Mui-readOnly` | Class name applied to the root element if the switch is read-only |
| `sizeLg` | `MuiSwitch-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiSwitch-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiSwitch-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiSwitch-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantSoft` | `MuiSwitch-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiSwitch-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Tab API

The Tab component API documentation.

## Import

```
import Tab from '@mui/joy/Tab';
// or
import { Tab } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `action` | `union` func<br>\| { current?: { focusVisible: func } } | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `disableIndicator` | `bool` | `false` | - |
| `indicatorInset` | `bool` | `false` | - |
| `indicatorPlacement` | `enum`'bottom'<br>\| 'left'<br>\| 'right'<br>\| 'top' | `row ? 'bottom' : 'right'` | - |
| `onChange` | `func` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `value` | `union` number<br>\| string | - | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'button'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiTab-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTab-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTab-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTab-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTab-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTab-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | Class name applied to the root element if \`disabled={true}\`. |
| `focusVisible` | `Mui-focusVisible` | Class name applied to the root element when its focus is visible. |
| `horizontal` | `MuiTab-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `selected` | `Mui-selected` | Class name applied to the root element when it is selected. |
| `variantOutlined` | `MuiTab-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTab-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTab-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiTab-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiTab-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# TabPanel API

The TabPanel component API documentation.

## Import

```
import TabPanel from '@mui/joy/TabPanel';
// or
import { TabPanel } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `keepMounted` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `value` | `union` number<br>\| string | `0` | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiTabPanel-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTabPanel-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTabPanel-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTabPanel-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTabPanel-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTabPanel-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `hidden` | `MuiTabPanel-hidden` | Class name applied to the root element if the tab is not active. |
| `horizontal` | `MuiTabPanel-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiTabPanel-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiTabPanel-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiTabPanel-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiTabPanel-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTabPanel-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTabPanel-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiTabPanel-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiTabPanel-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Select API

The Select component API documentation.

## Import

```
import Select from '@mui/joy/Select';
// or
import { Select } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `action` | `union` func<br>\| { current?: { focusVisible: func } } | - | - |
| `autoFocus` | `bool` | `false` | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `defaultListboxOpen` | `bool` | `false` | - |
| `defaultValue` | `any` | - | - |
| `disabled` | `bool` | `false` | - |
| `endDecorator` | `node` | - | - |
| `getSerializedValue` | `func` | - | - |
| `indicator` | `node` | - | - |
| `listboxId` | `string` | - | - |
| `listboxOpen` | `bool` | `undefined` | - |
| `multiple` | `bool` | - | - |
| `name` | `string` | - | - |
| `onChange` | `func` | - | - |
| `onClose` | `func` | - | - |
| `onListboxOpenChange` | `func` | - | - |
| `placeholder` | `node` | - | - |
| `renderValue` | `func` | - | - |
| `required` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | - | - |
| `slots` | `shape`{ button?: elementType, endDecorator?: elementType, indicator?: elementType, listbox?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `value` | `any` | - | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `button` | `'button'` | The component that renders the button. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |
| `indicator` | `'span'` | The component that renders the indicator. |
| `listbox` | `'ul'` | The component that renders the listbox. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiSelect-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiSelect-colorDanger` | Class name applied to the root slot if \`color="danger"\`. |
| `colorNeutral` | `MuiSelect-colorNeutral` | Class name applied to the root slot if \`color="neutral"\`. |
| `colorPrimary` | `MuiSelect-colorPrimary` | Class name applied to the root slot if \`color="primary"\`. |
| `colorSuccess` | `MuiSelect-colorSuccess` | Class name applied to the root slot if \`color="success"\`. |
| `colorWarning` | `MuiSelect-colorWarning` | Class name applied to the root slot if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | State class applied to the root slot if \`disabled={true}\`. |
| `expanded` | `Mui-expanded` | State class applied to the root slot if listbox open. |
| `focusVisible` | `Mui-focusVisible` | State class applied to the SelectBase root slot if the button is keyboard focused. |
| `multiple` | `MuiSelect-multiple` | Class name applied to the root slot if \`multiple=true\` |
| `popper` | `MuiSelect-popper` | Class name applied to the popper slot. |
| `sizeLg` | `MuiSelect-sizeLg` | Class name applied to the root slot if \`size="lg"\`. |
| `sizeMd` | `MuiSelect-sizeMd` | Class name applied to the root slot if \`size="md"\`. |
| `sizeSm` | `MuiSelect-sizeSm` | Class name applied to the root slot if \`size="sm"\`. |
| `variantOutlined` | `MuiSelect-variantOutlined` | Class name applied to the root slot if \`variant="outlined"\`. |
| `variantPlain` | `MuiSelect-variantPlain` | Class name applied to the root slot if \`variant="plain"\`. |
| `variantSoft` | `MuiSelect-variantSoft` | Class name applied to the root slot if \`variant="soft"\`. |
| `variantSolid` | `MuiSelect-variantSolid` | Class name applied to the root slot if \`variant="solid"\`. |

***

# SvgIcon API

The SvgIcon component API documentation.

## Import

```
import SvgIcon from '@mui/joy/SvgIcon';
// or
import { SvgIcon } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'inherit'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | - | - |
| `component` | `elementType` | - | - |
| `fontSize` | `union`'inherit'<br>\| 'lg'<br>\| 'md'<br>\| 'sm'<br>\| 'xl'<br>\| 'xl2'<br>\| 'xl3'<br>\| 'xl4'<br>\| 'xs'<br>\| string | - | - |
| `htmlColor` | `string` | - | - |
| `inheritViewBox` | `bool` | `false` | - |
| `shapeRendering` | `string` | - | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `titleAccess` | `string` | - | - |
| `viewBox` | `string` | `'0 0 24 24'` | - |

:::info
The `ref` is forwarded to the SVGSVGElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'svg'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorDanger` | `MuiSvgIcon-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorInherit` | `MuiSvgIcon-colorInherit` | Class name applied to the root element if \`color="inherit"\`. |
| `colorNeutral` | `MuiSvgIcon-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiSvgIcon-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiSvgIcon-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiSvgIcon-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `fontSizeInherit` | `MuiSvgIcon-fontSizeInherit` | Class name applied to the root element if \`fontSize="inherit"\`. |
| `fontSizeLg` | `MuiSvgIcon-fontSizeLg` | Class name applied to the root element if \`fontSize="lg"\`. |
| `fontSizeMd` | `MuiSvgIcon-fontSizeMd` | Class name applied to the root element if \`fontSize="md"\`. |
| `fontSizeSm` | `MuiSvgIcon-fontSizeSm` | Class name applied to the root element if \`fontSize="sm"\`. |
| `fontSizeXl` | `MuiSvgIcon-fontSizeXl` | Class name applied to the root element if \`fontSize="xl"\`. |
| `fontSizeXl2` | `MuiSvgIcon-fontSizeXl2` | Class name applied to the root element if \`fontSize="xl2"\`. |
| `fontSizeXl3` | `MuiSvgIcon-fontSizeXl3` | Class name applied to the root element if \`fontSize="xl3"\`. |
| `fontSizeXl4` | `MuiSvgIcon-fontSizeXl4` | Class name applied to the root element if \`fontSize="xl4"\`. |
| `fontSizeXs` | `MuiSvgIcon-fontSizeXs` | Class name applied to the root element if \`fontSize="xs"\`. |
| `sizeLg` | `MuiSvgIcon-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiSvgIcon-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiSvgIcon-sizeSm` | Class name applied to the root element if \`size="sm"\`. |

***

# TabList API

The TabList component API documentation.

## Import

```
import TabList from '@mui/joy/TabList';
// or
import { TabList } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disableUnderline` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | - | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sticky` | `enum`'bottom'<br>\| 'top' | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `tabFlex` | `union` number<br>\| string | - | - |
| `underlinePlacement` | `enum`'bottom'<br>\| 'left'<br>\| 'right'<br>\| 'top' | `orientation === 'horizontal' ? 'bottom' : 'right'` | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiTabList-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTabList-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTabList-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTabList-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTabList-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTabList-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `sizeLg` | `MuiTabList-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiTabList-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiTabList-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiTabList-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTabList-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTabList-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiTabList-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# FormLabel API

The FormLabel component API documentation.

## Import

```
import FormLabel from '@mui/joy/FormLabel';
// or
import { FormLabel } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `component` | `elementType` | - | - |
| `required` | `bool` | - | - |
| `slotProps` | `shape`{ asterisk?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ asterisk?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |

:::info
The `ref` is forwarded to the HTMLLabelElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'label'` | The component that renders the root. |
| `asterisk` | `'span'` | The component that renders the asterisk. |

***

# Table API

The Table component API documentation.

## Import

```
import Table from '@mui/joy/Table';
// or
import { Table } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `borderAxis` | `union`'both'<br>\| 'bothBetween'<br>\| 'none'<br>\| 'x'<br>\| 'xBetween'<br>\| 'y'<br>\| 'yBetween'<br>\| string | `'xBetween'` | - |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `hoverRow` | `bool` | `false` | - |
| `noWrap` | `bool` | `false` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `stickyFooter` | `bool` | `false` | - |
| `stickyHeader` | `bool` | `false` | - |
| `stripe` | `union`'odd'<br>\| 'even'<br>\| string | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLTableElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'table'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `borderAxisBoth` | `MuiTable-borderAxisBoth` | Class name applied to the root element if \`borderAxis="both"\`. |
| `borderAxisBothBetween` | `MuiTable-borderAxisBothBetween` | Class name applied to the root element if \`borderAxis="bothBetween"\`. |
| `borderAxisNone` | `MuiTable-borderAxisNone` | Class name applied to the root element if \`borderAxis="none"\`. |
| `borderAxisX` | `MuiTable-borderAxisX` | Class name applied to the root element if \`borderAxis="x"\`. |
| `borderAxisXBetween` | `MuiTable-borderAxisXBetween` | Class name applied to the root element if \`borderAxis="xBetween"\`. |
| `borderAxisY` | `MuiTable-borderAxisY` | Class name applied to the root element if \`borderAxis="y"\`. |
| `borderAxisYBetween` | `MuiTable-borderAxisYBetween` | Class name applied to the root element if \`borderAxis="yBetween"\`. |
| `colorContext` | `MuiTable-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTable-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTable-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTable-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTable-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTable-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `hoverRow` | `MuiTable-hoverRow` | Class name applied to the root element if \`hoverRow\` is true. |
| `noWrap` | `MuiTable-noWrap` | Class name applied to the root element if \`noWrap\` is true. |
| `sizeLg` | `MuiTable-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiTable-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiTable-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `stickyFooter` | `MuiTable-stickyFooter` | Class name applied to the root element if \`stickyFooter\` is true. |
| `stickyHeader` | `MuiTable-stickyHeader` | Class name applied to the root element if \`stickyHeader\` is true. |
| `variantOutlined` | `MuiTable-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTable-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTable-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiTable-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# ToggleButtonGroup API

The ToggleButtonGroup component API documentation.

## Import

```
import ToggleButtonGroup from '@mui/joy/ToggleButtonGroup';
// or
import { ToggleButtonGroup } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `buttonFlex` | `union` number<br>\| string | - | - |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'info'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `disabled` | `bool` | `false` | - |
| `onChange` | `func` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `size` | `enum`'sm'<br>\| 'md'<br>\| 'lg' | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `spacing` | `union` Array\| string><br>\| number<br>\| { lg?: number<br>\| string, md?: number<br>\| string, sm?: number<br>\| string, xl?: number<br>\| string, xs?: number<br>\| string }<br>\| string | `0` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `value` | `union` Array<br>\| string | - | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiToggleButtonGroup-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiToggleButtonGroup-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiToggleButtonGroup-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiToggleButtonGroup-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiToggleButtonGroup-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiToggleButtonGroup-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `horizontal` | `MuiToggleButtonGroup-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiToggleButtonGroup-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiToggleButtonGroup-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiToggleButtonGroup-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiToggleButtonGroup-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiToggleButtonGroup-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiToggleButtonGroup-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiToggleButtonGroup-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiToggleButtonGroup-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Tabs API

The Tabs component API documentation.

## Import

```
import Tabs from '@mui/joy/Tabs';
// or
import { Tabs } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `defaultValue` | `union` number<br>\| string | - | - |
| `direction` | `enum`'ltr'<br>\| 'rtl' | `'ltr'` | - |
| `onChange` | `func` | - | - |
| `orientation` | `enum`'horizontal'<br>\| 'vertical' | `'horizontal'` | - |
| `selectionFollowsFocus` | `bool` | - | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `slotProps` | `shape`{ root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `value` | `union` number<br>\| string | - | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'plain'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiTabs-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTabs-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTabs-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTabs-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTabs-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTabs-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `horizontal` | `MuiTabs-horizontal` | Class name applied to the root element if \`orientation="horizontal"\`. |
| `sizeLg` | `MuiTabs-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiTabs-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiTabs-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiTabs-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTabs-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTabs-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiTabs-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |
| `vertical` | `MuiTabs-vertical` | Class name applied to the root element if \`orientation="vertical"\`. |

***

# Typography API

The Typography component API documentation.

## Import

```
import Typography from '@mui/joy/Typography';
// or
import { Typography } from '@mui/joy';
```

## Props

Any other props supplied will be provided to the root element (native element).

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `node` | - | - |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | - | - |
| `component` | `elementType` | - | - |
| `endDecorator` | `node` | - | - |
| `gutterBottom` | `bool` | `false` | - |
| `level` | `union`'h1'<br>\| 'h2'<br>\| 'h3'<br>\| 'h4'<br>\| 'title-lg'<br>\| 'title-md'<br>\| 'title-sm'<br>\| 'body-lg'<br>\| 'body-md'<br>\| 'body-sm'<br>\| 'body-xs'<br>\| 'inherit'<br>\| string | `'body-md'` | - |
| `levelMapping` | `object` | `{<br>  h1: 'h1',<br>  h2: 'h2',<br>  h3: 'h3',<br>  h4: 'h4',<br>  'title-lg': 'p',<br>  'title-md': 'p',<br>  'title-sm': 'p',<br>  'body-lg': 'p',<br>  'body-md': 'p',<br>  'body-sm': 'p',<br>  'body-xs': 'span',<br>  inherit: 'p',<br>}` | - |
| `noWrap` | `bool` | `false` | - |
| `slotProps` | `shape`{ endDecorator?: func<br>\| object, root?: func<br>\| object, startDecorator?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ endDecorator?: elementType, root?: elementType, startDecorator?: elementType } | `{}` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `textColor` | `any` | - | - |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | - | - |

The component is styled using the `Typography` CSS class.

:::info
The `ref` is forwarded to the HTMLParagraphElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'a'` | The component that renders the root. |
| `startDecorator` | `'span'` | The component that renders the start decorator. |
| `endDecorator` | `'span'` | The component that renders the end decorator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `body-lg` | `MuiTypography-body-lg` | Class name applied to the root element if \`level="body-lg"\`. |
| `body-md` | `MuiTypography-body-md` | Class name applied to the root element if \`level="body-md"\`. |
| `body-sm` | `MuiTypography-body-sm` | Class name applied to the root element if \`level="body-sm"\`. |
| `body-xs` | `MuiTypography-body-xs` | Class name applied to the root element if \`level="body-xs"\`. |
| `colorContext` | `MuiTypography-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTypography-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTypography-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTypography-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTypography-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTypography-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `gutterBottom` | `MuiTypography-gutterBottom` | Class name applied to the root element if \`gutterBottom={true}\`. |
| `h1` | `MuiTypography-h1` | Class name applied to the root element if \`level="h1"\`. |
| `h2` | `MuiTypography-h2` | Class name applied to the root element if \`level="h2"\`. |
| `h3` | `MuiTypography-h3` | Class name applied to the root element if \`level="h3"\`. |
| `h4` | `MuiTypography-h4` | Class name applied to the root element if \`level="h4"\`. |
| `noWrap` | `MuiTypography-noWrap` | Class name applied to the root element if \`nowrap={true}\`. |
| `title-lg` | `MuiTypography-title-lg` | Class name applied to the root element if \`level="title-lg"\`. |
| `title-md` | `MuiTypography-title-md` | Class name applied to the root element if \`level="title-md"\`. |
| `title-sm` | `MuiTypography-title-sm` | Class name applied to the root element if \`level="title-sm"\`. |
| `variantOutlined` | `MuiTypography-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTypography-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTypography-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiTypography-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |

***

# Textarea API

The Textarea component API documentation.

## Import

```
import Textarea from '@mui/joy/Textarea';
// or
import { Textarea } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `color` | `union`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning'<br>\| string | `'neutral'` | - |
| `endDecorator` | `node` | - | - |
| `error` | `bool` | `false` | - |
| `maxRows` | `union` number<br>\| string | - | - |
| `minRows` | `union` number<br>\| string | `1` | - |
| `size` | `union`'sm'<br>\| 'md'<br>\| 'lg'<br>\| string | `'md'` | - |
| `startDecorator` | `node` | - | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `variant` | `union`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid'<br>\| string | `'outlined'` | - |

:::info
The `ref` is forwarded to the HTMLDivElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `textarea` | `'textarea'` | The component that renders the textarea. |
| `startDecorator` | `'div'` | The component that renders the start decorator. |
| `endDecorator` | `'div'` | The component that renders the end decorator. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiTextarea-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTextarea-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTextarea-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTextarea-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTextarea-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTextarea-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `disabled` | `Mui-disabled` | Class name applied to the root element if \`disabled={true}\`. |
| `error` | `Mui-error` | State class applied to the root element if \`error={true}\`. |
| `focused` | `Mui-focused` | Class name applied to the root element if the component is focused. |
| `formControl` | `MuiTextarea-formControl` | Class name applied to the root element if the component is a descendant of \`FormControl\`. |
| `sizeLg` | `MuiTextarea-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiTextarea-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiTextarea-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `variantOutlined` | `MuiTextarea-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTextarea-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTextarea-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |

***

# Tooltip API

The Tooltip component API documentation.

## Import

```
import Tooltip from '@mui/joy/Tooltip';
// or
import { Tooltip } from '@mui/joy';
```

## Props

| Name | Type | Default | Description |
| --- | --- | --- | --- |
| `children` | `element` | - | - |
| `arrow` | `bool` | `false` | - |
| `color` | `enum`'danger'<br>\| 'neutral'<br>\| 'primary'<br>\| 'success'<br>\| 'warning' | `'neutral'` | - |
| `component` | `elementType` | - | - |
| `describeChild` | `bool` | `false` | - |
| `direction` | `enum`'ltr'<br>\| 'rtl' | `'ltr'` | - |
| `disableFocusListener` | `bool` | `false` | - |
| `disableHoverListener` | `bool` | `false` | - |
| `disableInteractive` | `bool` | `false` | - |
| `disablePortal` | `bool` | `false` | - |
| `disableTouchListener` | `bool` | `false` | - |
| `enterDelay` | `number` | `100` | - |
| `enterNextDelay` | `number` | `0` | - |
| `enterTouchDelay` | `number` | `700` | - |
| `followCursor` | `bool` | `false` | - |
| `id` | `string` | - | - |
| `keepMounted` | `bool` | `false` | - |
| `leaveDelay` | `number` | `0` | - |
| `leaveTouchDelay` | `number` | `1500` | - |
| `modifiers` | `arrayOf` Array<{ data?: object, effect?: func, enabled?: bool, fn?: func, name?: any, options?: object, phase?: 'afterMain'<br>\| 'afterRead'<br>\| 'afterWrite'<br>\| 'beforeMain'<br>\| 'beforeRead'<br>\| 'beforeWrite'<br>\| 'main'<br>\| 'read'<br>\| 'write', requires?: Array, requiresIfExists?: Array }> | - | - |
| `onClose` | `func` | - | - |
| `onOpen` | `func` | - | - |
| `open` | `bool` | - | - |
| `placement` | `enum`'bottom-end'<br>\| 'bottom-start'<br>\| 'bottom'<br>\| 'left-end'<br>\| 'left-start'<br>\| 'left'<br>\| 'right-end'<br>\| 'right-start'<br>\| 'right'<br>\| 'top-end'<br>\| 'top-start'<br>\| 'top' | `'bottom'` | - |
| `size` | `enum`'sm'<br>\| 'md'<br>\| 'lg' | `'md'` | - |
| `slotProps` | `shape`{ arrow?: func<br>\| object, root?: func<br>\| object } | `{}` | - |
| `slots` | `shape`{ arrow?: elementType, root?: elementType } | `{}` | - |
| `sx` | `union` Array\| object<br>\| bool><br>\| func<br>\| object | - | The `sx` prop is also available. |
| `title` | `node` | - | - |
| `variant` | `enum`'outlined'<br>\| 'plain'<br>\| 'soft'<br>\| 'solid' | `'solid'` | - |

:::info
The `ref` is forwarded to the HTMLButtonElement element.
:::

## Slots

The component can be customized using the following slots:

| Name | Default | Description |
| --- | --- | --- |
| `root` | `'div'` | The component that renders the root. |
| `arrow` | `'span'` | The component that renders the arrow. |

## CSS classes

The component can be styled using the following CSS classes:

| Rule name | Global class | Description |
| --- | --- | --- |
| `colorContext` | `MuiTooltip-colorContext` | Class name applied to the root element when color inversion is triggered. |
| `colorDanger` | `MuiTooltip-colorDanger` | Class name applied to the root element if \`color="danger"\`. |
| `colorNeutral` | `MuiTooltip-colorNeutral` | Class name applied to the root element if \`color="neutral"\`. |
| `colorPrimary` | `MuiTooltip-colorPrimary` | Class name applied to the root element if \`color="primary"\`. |
| `colorSuccess` | `MuiTooltip-colorSuccess` | Class name applied to the root element if \`color="success"\`. |
| `colorWarning` | `MuiTooltip-colorWarning` | Class name applied to the root element if \`color="warning"\`. |
| `placementBottom` | `MuiTooltip-placementBottom` | Class name applied to the root element if \`placement\` contains "bottom". |
| `placementLeft` | `MuiTooltip-placementLeft` | Class name applied to the root element if \`placement\` contains "left". |
| `placementRight` | `MuiTooltip-placementRight` | Class name applied to the root element if \`placement\` contains "right". |
| `placementTop` | `MuiTooltip-placementTop` | Class name applied to the root element if \`placement\` contains "top". |
| `sizeLg` | `MuiTooltip-sizeLg` | Class name applied to the root element if \`size="lg"\`. |
| `sizeMd` | `MuiTooltip-sizeMd` | Class name applied to the root element if \`size="md"\`. |
| `sizeSm` | `MuiTooltip-sizeSm` | Class name applied to the root element if \`size="sm"\`. |
| `tooltipArrow` | `MuiTooltip-tooltipArrow` | Class name applied to the root element if \`arrow={true}\`. |
| `touch` | `MuiTooltip-touch` | Class name applied to the root element if the tooltip is opened by touch. |
| `variantOutlined` | `MuiTooltip-variantOutlined` | Class name applied to the root element if \`variant="outlined"\`. |
| `variantPlain` | `MuiTooltip-variantPlain` | Class name applied to the root element if \`variant="plain"\`. |
| `variantSoft` | `MuiTooltip-variantSoft` | Class name applied to the root element if \`variant="soft"\`. |
| `variantSolid` | `MuiTooltip-variantSolid` | Class name applied to the root element if \`variant="solid"\`. |